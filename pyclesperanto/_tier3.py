# this code is auto-generated by the script 'pyclesperanto_autogen_tier_script.ipynb'.
# Do not edit manually. Instead, edit the script and run it again.

from ._core import Device
from ._array import Image
from ._decorators import plugin_function


@plugin_function
def bounding_box(input_image: Image, device: Device = None) -> list:
    from ._pyclesperanto import _bounding_box as op

    return op(device=device, src=input_image)


@plugin_function
def center_of_mass(input_image: Image, device: Device = None) -> list:
    from ._pyclesperanto import _center_of_mass as op

    return op(device=device, src=input_image)


@plugin_function
def exclude_labels(
    input_image: Image,
    list: Image = None,
    output_image: Image = None,
    device: Device = None,
) -> Image:
    from ._pyclesperanto import _exclude_labels as op

    return op(device=device, src=input_image, list=list, dst=output_image)


@plugin_function
def exclude_labels_on_edges(
    input_image: Image,
    output_image: Image = None,
    exclude_x: bool = True,
    exclude_y: bool = True,
    exclude_z: bool = True,
    device: Device = None,
) -> Image:
    from ._pyclesperanto import _exclude_labels_on_edges as op

    return op(
        device=device,
        src=input_image,
        dst=output_image,
        exclude_x=bool(exclude_x),
        exclude_y=bool(exclude_y),
        exclude_z=bool(exclude_z),
    )


@plugin_function
def flag_existing_labels(
    input_image: Image, output_image: Image = None, device: Device = None
) -> Image:
    from ._pyclesperanto import _flag_existing_labels as op

    return op(device=device, src=input_image, dst=output_image)


@plugin_function
def gamma_correction(
    input_image: Image,
    output_image: Image = None,
    gamma: float = 0,
    device: Device = None,
) -> Image:
    from ._pyclesperanto import _gamma_correction as op

    return op(device=device, src=input_image, dst=output_image, gamma=float(gamma))


@plugin_function
def generate_binary_overlap_matrix(
    input_image0: Image,
    input_image1: Image,
    output_image: Image = None,
    device: Device = None,
) -> Image:
    from ._pyclesperanto import _generate_binary_overlap_matrix as op

    return op(device=device, src0=input_image0, src1=input_image1, dst=output_image)


@plugin_function
def generate_touch_matrix(
    input_image: Image, output_image: Image = None, device: Device = None
) -> Image:
    from ._pyclesperanto import _generate_touch_matrix as op

    return op(device=device, src=input_image, dst=output_image)


@plugin_function
def histogram(
    input_image: Image,
    output_image: Image = None,
    nbins: int = 0,
    min: float = 0,
    max: float = 0,
    device: Device = None,
) -> Image:
    from ._pyclesperanto import _histogram as op

    return op(
        device=device,
        src=input_image,
        dst=output_image,
        nbins=int(nbins),
        min=float(min),
        max=float(max),
    )


@plugin_function
def jaccard_index(
    input_image1: Image, input_image2: Image, device: Device = None
) -> float:
    from ._pyclesperanto import _jaccard_index as op

    return op(device=device, src1=input_image1, src2=input_image2)


@plugin_function
def labelled_spots_to_pointlist(
    input_image: Image, output_image: Image = None, device: Device = None
) -> Image:
    from ._pyclesperanto import _labelled_spots_to_pointlist as op

    return op(device=device, src=input_image, dst=output_image)


@plugin_function
def maximum_coordinate(input_image: Image, device: Device = None) -> list:
    from ._pyclesperanto import _maximum_coordinate as op

    return op(device=device, src=input_image)


@plugin_function
def mean_of_all_pixels(input_image: Image, device: Device = None) -> float:
    from ._pyclesperanto import _mean_of_all_pixels as op

    return op(device=device, src=input_image)


@plugin_function
def minimum_coordinate(input_image: Image, device: Device = None) -> list:
    from ._pyclesperanto import _minimum_coordinate as op

    return op(device=device, src=input_image)
